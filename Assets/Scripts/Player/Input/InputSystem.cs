//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""3fb03687-c8d1-4bf7-940b-538b1f8d19dd"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""88a8fddb-a12e-4a96-b8b2-cf2cba196eb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.001)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d70425e1-52e9-43f5-a34b-1f24f17c175c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e3067404-ccc2-4836-ad68-73ad36a31760"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""42ed3579-4d59-464e-b0d0-81dc9a9eb960"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""848d9fa2-efd5-4b34-974b-d5f4ceb3090e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""275a9291-3ffc-4bed-be8a-62602fb917a7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Record"",
            ""id"": ""1b1d2eaa-7432-4d2f-b3e8-3e137ee276ae"",
            ""actions"": [
                {
                    ""name"": ""StartRecording"",
                    ""type"": ""Button"",
                    ""id"": ""9337ce2a-5759-42b7-80fa-d816714d5991"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpawnGhost"",
                    ""type"": ""Button"",
                    ""id"": ""71815f2f-d18f-4f46-9d38-c08ee4a29f7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8e5bf886-5ad8-4af0-9fc9-dc2782759eb3"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartRecording"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64a70715-a29c-4e23-b1fe-35ea95a63a5c"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnGhost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Forward = m_Movement.FindAction("Forward", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        // Record
        m_Record = asset.FindActionMap("Record", throwIfNotFound: true);
        m_Record_StartRecording = m_Record.FindAction("StartRecording", throwIfNotFound: true);
        m_Record_SpawnGhost = m_Record.FindAction("SpawnGhost", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Forward;
    private readonly InputAction m_Movement_Jump;
    public struct MovementActions
    {
        private @InputSystem m_Wrapper;
        public MovementActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_Movement_Forward;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Forward.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnForward;
                @Forward.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnForward;
                @Forward.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnForward;
                @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Record
    private readonly InputActionMap m_Record;
    private IRecordActions m_RecordActionsCallbackInterface;
    private readonly InputAction m_Record_StartRecording;
    private readonly InputAction m_Record_SpawnGhost;
    public struct RecordActions
    {
        private @InputSystem m_Wrapper;
        public RecordActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartRecording => m_Wrapper.m_Record_StartRecording;
        public InputAction @SpawnGhost => m_Wrapper.m_Record_SpawnGhost;
        public InputActionMap Get() { return m_Wrapper.m_Record; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RecordActions set) { return set.Get(); }
        public void SetCallbacks(IRecordActions instance)
        {
            if (m_Wrapper.m_RecordActionsCallbackInterface != null)
            {
                @StartRecording.started -= m_Wrapper.m_RecordActionsCallbackInterface.OnStartRecording;
                @StartRecording.performed -= m_Wrapper.m_RecordActionsCallbackInterface.OnStartRecording;
                @StartRecording.canceled -= m_Wrapper.m_RecordActionsCallbackInterface.OnStartRecording;
                @SpawnGhost.started -= m_Wrapper.m_RecordActionsCallbackInterface.OnSpawnGhost;
                @SpawnGhost.performed -= m_Wrapper.m_RecordActionsCallbackInterface.OnSpawnGhost;
                @SpawnGhost.canceled -= m_Wrapper.m_RecordActionsCallbackInterface.OnSpawnGhost;
            }
            m_Wrapper.m_RecordActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartRecording.started += instance.OnStartRecording;
                @StartRecording.performed += instance.OnStartRecording;
                @StartRecording.canceled += instance.OnStartRecording;
                @SpawnGhost.started += instance.OnSpawnGhost;
                @SpawnGhost.performed += instance.OnSpawnGhost;
                @SpawnGhost.canceled += instance.OnSpawnGhost;
            }
        }
    }
    public RecordActions @Record => new RecordActions(this);
    public interface IMovementActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IRecordActions
    {
        void OnStartRecording(InputAction.CallbackContext context);
        void OnSpawnGhost(InputAction.CallbackContext context);
    }
}
